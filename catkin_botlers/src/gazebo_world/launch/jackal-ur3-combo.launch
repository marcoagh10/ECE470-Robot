<?xml version="1.0"?>

<launch>
    <!-- <group ns="ur3"> -->
  <arg name="limited" default="false" doc="If true, limits joint range [-PI, PI] on all joints." />
  <arg name="paused" default="false" doc="Starts gazebo in paused mode" />
  <arg name="gui" default="true" doc="Starts gazebo gui" />
  <arg name="full" default="false" doc="Wether or not to include the full amazon environment" />


  <group if="$(eval arg('full') == 1)">
    <include file="$(find aws_robomaker_small_house_world)/launch/small_house.launch">
                <arg name="gui" value="$(arg gui)" />
        </include>
  </group>
    <group if="$(eval arg('full') == 0)">
  <!-- startup simulated world --> -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" default="worlds/empty.world"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/>
  </include>
  </group>
          
  <arg name="x" default="2.27" />
  <arg name="y" default="-2.46" />
  <arg name="z" default="1" />
  <arg name="yaw" default="0" />
  <arg name="joystick" default="false" />

   <group ns="/jackal">

    <!-- Configuration of Jackal which you would like to simulate.
        See jackal_description for details. -->
    <arg name="config" default="front_laser" />
    <!-- <arg name="config" default="base" /> -->
  <arg name="env_runner" value="$(eval 'env_run' if not optenv('OS', 'unknown').lower().startswith('windows') else 'env_run.bat')" />
  <param name="robot_description"
         command="$(find jackal_description)/scripts/$(arg env_runner)
                    $(find jackal_description)/urdf/configs/$(arg config)
                    $(find xacro)/xacro $(find gazebo_world)/urdf/jackal.urdf.xacro
                    --inorder" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
    <!-- <remap from="robot_description" to="/jackal/robot_description" /> -->
    <param name="tf_prefix" value="jackal" />
  
  </node>


    <!-- Load Jackal's description, controllers, and teleop nodes. -->
    <!-- <include file="$(find jackal_description)/launch/description.launch"> 
      <arg name="config" value="$(arg config)" />
    </include>  -->

    <include file="$(find gazebo_world)/launch/control.launch" />
    <include file="$(find jackal_control)/launch/teleop.launch">
      <arg name="joystick" value="$(arg joystick)" />
    </include>

      <!-- Spawn Jackal -->
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
          args="-urdf -param robot_description -model jackal -x $(arg x) -y $(arg y) -z $(arg z) -R 0 -P 0 -Y $(arg yaw)" output="screen" respawn="false"/>
</group>

<!-- send robot urdf to param server -->
<include file="$(find ur_description)/launch/ur3_upload.launch">
<arg name="limited" value="$(arg limited)"/>
</include>

<!-- push robot_description to factory and spawn robot in gazebo -->
<node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot -x -0.15 -y 0.15 -z 2.01" respawn="false" output="screen" />

<include file="$(find ur_gazebo)/launch/controller_utils.launch"/>

<!-- start this controller -->
<rosparam file="$(find ur_gazebo)/controller/arm_controller_ur3.yaml" command="load"/>
<node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn arm_controller" respawn="false" output="screen"/>

<!-- load other controllers -->
<node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false" output="screen" args="load joint_group_position_controller" />

<!-- <node name="spawn_block" pkg="gazebo_ros" type="spawn_model" args="-file $(find ur_description)/urdf/block.urdf -urdf -model block" /> -->

<node name="spawn_camera" pkg="gazebo_ros" type="spawn_model" args="-file $(find ur_description)/urdf/camera.urdf -urdf -model camera -x 0.29 -y 0.105 -z 0.92" />

<node name="ur3_gazebo_driver_1" pkg="ur3_driver" type="ur3_gazebo_driver.py" output="screen">
</node>

<include file="$(find gazebo_world)/launch/spawn_coke.launch"> 
</include>

</launch>
